#include "quickMaffs.nxc"
#include "vectors.nxc"
#include "map.nxc"
#define SAMPLE_SIZE  100 
#define SENSOR_HEADING 0
#define SENSOR_X 0
#define SENSOR_Y  0
#define ULTAR_SONIC_MAX 155
#define NOISE_REDUCTION_1 1
#define NOISE_REDUCTION_2 0
#define NOISE_REDUCTION_3 1
#define NOISE_REDUCTION_4 0
#define ZHIT 0.82588
#define ZMAX 0.17325
#define ZRAND 0.00050299
#define OHIT 8.4662
#define DRAW_PROB 1000


struct sensorReading{
 vec2 vector;
 byte ultraSonic[];
 int ultraSonicHeading[];
 int heading;
 int odometryHeading;
};


struct state{
 int x;
 int y;
 int heading;
 float probability;
};

struct timeStep{
 state states[SAMPLE_SIZE];
 state probStates[SAMPLE_SIZE];
 sensorReading sensor;
 float maxProbability;
};

timeStep timeStep0;
timeStep timeStep1;


void monteCarlo(sensorReading sensor);
state sampleMotionModel(sensorReading sensor, state previousState, sensorReading previousSensorReading);
state sensorMotionModel(sensorReading sensor,state previousState, sensorReading previousSensorReading);
float sample(float b);
float probabilityTriangular(float a, float b);
float likelihoodFinderModel(sensorReading sensor, state newState);
float distanceNearestObject(int x, int y);
float calculateMaxProb(sensorReading sensor);

void monteCarlo(sensorReading sensor)
{
  timeStep1.sensor = sensor;
  int i;
  for( i=0;i<SAMPLE_SIZE ;i++){
        timeStep1.probStates[i]= sampleMotionModel(sensor,timeStep0.probStates[i],timeStep0.sensor);

  }
  int tempDrawCount=0;
  timeStep1.maxProbability = calculateMaxProb(sensor);
  while(tempDrawCount < SAMPLE_SIZE){
  for(i=0;i<SAMPLE_SIZE ;i++){
	 if(timeStep1.probStates[i].probability*DRAW_PROB>=(Random(timeStep1.maxProbability*DRAW_PROB))){
	    timeStep1.states[tempDrawCount]=timeStep1.probStates[i];
		tempDrawCount++;
	 }
  }
  }
}

state sampleMotionModel(sensorReading sensor, state previousState, sensorReading previousSensorReading){
 
      state newState;
	  newState = sensorMotionModel(sensor, previousState, previousSensorReading);
      newState.probability = likelihoodFinderModel(sensor,newState);
      return newState;
}
float calculateMaxProb(sensorReading sensor){
	float maxProbability = 100000000.0;
	int i;
	int arrayLength = ArrayLen(sensor.ultraSonic);
	for (i=0; i<arrayLength;i++){
		if(sensor.ultraSonic[i]<ULTAR_SONIC_MAX){
			maxProbability = maxProbability*(ZHIT*probabilityTriangular(0,pow(OHIT,2))+ZRAND/ZMAX);
		}

	
	}
	return maxProbability;
}

state sensorMotionModel(sensorReading sensor, state previousState, sensorReading previousSensorReading){
	  float previousOdometryHeading = (previousSensorReading.odometryHeading * 2 * PI)/360;
	  float currentOdomentryHeading = (sensor.odometryHeading *2 * PI)/360;
	  
      float rotation1 = atan2(sensor.vector.y-previousSensorReading.vector.y,sensor.vector.x-previousSensorReading.vector.x)-previousOdometryHeading;
      float trans = sqrt(pow(previousSensorReading.vector.x-sensor.vector.x,2)+pow(previousSensorReading.vector.y-sensor.vector.y,2));
      float rotation2 = currentOdomentryHeading-previousOdometryHeading-rotation1;
	  state newState;
	  bool done = false ;
      while(!done){
      float rotation1Updated = rotation1 - sample(NOISE_REDUCTION_1*rotation1+NOISE_REDUCTION_2*trans);
      float transUpdated = trans-sample(NOISE_REDUCTION_3*trans+NOISE_REDUCTION_4*(rotation1+rotation2));
      float rotation2Updated = rotation2 - sample(NOISE_REDUCTION_1*rotation2+NOISE_REDUCTION_2*trans);
      
     
      newState.x = trunc(previousState.x+transUpdated*cos(previousOdometryHeading+rotation1Updated)+0.5);
      newState.y = trunc(previousState.y+transUpdated*sin(previousOdometryHeading+rotation1Updated)+0.5);
      newState.heading = ((previousOdometryHeading + rotation1Updated + rotation2Updated)/ (2 * PI))  *360;
	  unsigned short index = coordToLstIndex(newState.x,newState.y);
	  if(index != -1  && isValid(index)){
		done = true ;
	  }
	 }
      return newState;
}

float sample(float b){
	float temp = Random(99);
	float temp2 = Random(99);
     return b*((Random(2)-temp/100.00)*(Random(2)-temp2/100.00));

}

float probabilityTriangular(float a, float b){
      if(a>sqrt(6*b)){
        return 0;
      }else return (sqrt(6*b)-a)/(6*b);
}


float likelihoodFinderModel(sensorReading sensor, state newState){
      float probability =100000000.0;
	  int i=0;
	  int arrayLength = ArrayLen(sensor.ultraSonic);
	  for (i=0; i<arrayLength;i++){
			if(sensor.ultraSonic[i]<ULTAR_SONIC_MAX){
			float robotHeading = (sensor.heading * 2 * PI)/360;
			float sonicHeading = (+sensor.ultraSonicHeading[i] *2 * PI)/360;
			float sonicReading = sensor.ultraSonic[i]/GRID_FIELD_WIDTH+1;
			
			int sensorXt = trunc((newState.x+ SENSOR_X * cos(robotHeading)-SENSOR_Y*sin(robotHeading)+sonicReading*cos(robotHeading+sonicHeading))+0.5);
			int sensorYt = trunc((newState.y+ SENSOR_Y * cos(robotHeading)+SENSOR_X*sin(robotHeading)+sonicReading*sin(robotHeading+sonicHeading))+0.5);
			vec2 vec;
			vec.x = sensorXt;
			vec.y = sensorYt;
			float dist2 = findDistToObject(vec);
			probability=probability*(ZHIT*probabilityTriangular(pow(dist2,2),pow(OHIT,2))+ZRAND/ZMAX);
		 }
	  }
	  return probability;

}

state findBestState(){
	state bestState;
	bestState.probability = 0;
	int i;
	int arrayLength = ArrayLen(timeStep1.states);
	for(i=0;i<arrayLength;i++){
		if(timeStep1.states[i].probability > bestState.probability){
			bestState = timeStep1.states[i];
		}
		
	}
	return bestState;
}