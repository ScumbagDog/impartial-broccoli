#include "MonteCarloController.nxc"
#include "vectors.nxc"
sensorReading makeFirstSensorReading();
sensorReading makeSecondSensorReading();

task main(){
	SetSleepTimeout(100);
	SetSleepTime(100);
	int arraySize = 10;
	vec2 inputArray[10];
	fillMap();
	unsigned long initiateMean = 0;
	unsigned long initiateMax =0;
	unsigned long firstMoveMean = 0;
	unsigned long firstMoveMax =0;
	unsigned long nextMoveMean = 0;
	unsigned long nextMoveMax =0;
	int i;
	for(i=0; i<10; i++){
		SetSleepTimer(0);
		initQueue(inputArray,10);
		unsigned long tick0 = CurrentTick();
		initiateTimeStep();
		tick0 = CurrentTick()-tick0;
		
		unsigned long tick1 = CurrentTick();
		firstMove(28,28,inputArray, arraySize);
		tick1 = CurrentTick()-tick1;
		

		unsigned long tick2 = CurrentTick();
		nextMove(makeFirstSensorReading(),inputArray,arraySize);
		tick2 = CurrentTick()-tick2;
		if(tick0 > initiateMax){
			initiateMax = tick0;
		}
		if(tick1 > firstMoveMax){
			firstMoveMax = tick1;
		}
		if(tick2 > nextMoveMax){
			nextMoveMax = tick2;
		}
		initiateMean = initiateMean + tick0;
		firstMoveMean = firstMoveMean + tick1;
		nextMoveMean = nextMoveMean + tick2;
	}
	initiateMean = initiateMean/i;
	firstMoveMean = firstMoveMean/i;
	nextMoveMean = nextMoveMean/i;
	byte handle =0;
	int fileSize = 1000;
	string fileName = "MontePaaTur";
	CreateFile(fileName,fileSize,handle);
	string temp;
	temp = NumToStr(initiateMean);
	WriteLn(handle,temp);
	temp = NumToStr(initiateMax);
	WriteLn(handle,temp);
	WriteLn(handle,"");
	
	temp = NumToStr(firstMoveMean);
	WriteLn(handle,temp);
	temp = NumToStr(firstMoveMax);
	WriteLn(handle,temp);
	WriteLn(handle,"");
	
	
	temp = NumToStr(nextMoveMean);
	WriteLn(handle,temp);
	temp = NumToStr(nextMoveMax);
	WriteLn(handle,temp);
	WriteLn(handle,"");
}
/*
503
222264
18347
*/
sensorReading makeFirstSensorReading(){
	sensorReading sensorTest;
	ArrayInit(sensorTest.ultraSonic,0,6);
	ArrayInit(sensorTest.ultraSonicHeading,0,6);

	
	sensorTest.ultraSonic[0] = 255;
	sensorTest.ultraSonic[1] = 10;
	sensorTest.ultraSonic[2] = 100;
	sensorTest.ultraSonic[3] = 255;
	sensorTest.ultraSonic[4] = 13;
	sensorTest.ultraSonic[5] = 12;
	
	sensorTest.ultraSonicHeading[0] = 0;
	sensorTest.ultraSonicHeading[1] = 90;
	sensorTest.ultraSonicHeading[2] = 180;
	sensorTest.ultraSonicHeading[3] = 270;
	sensorTest.ultraSonicHeading[4] = 70;
	sensorTest.ultraSonicHeading[5] = 110;
	sensorTest.heading = 90;
	return sensorTest;
}

sensorReading makeSecondSensorReading(){
	sensorReading sensorTest;
	ArrayInit(sensorTest.ultraSonic,0,6);
	ArrayInit(sensorTest.ultraSonicHeading,0,6);
	
	sensorTest.ultraSonic[0] = 80;
	sensorTest.ultraSonic[1] = 30;
	sensorTest.ultraSonic[2] = 255;
	sensorTest.ultraSonic[3] = 255;
	sensorTest.ultraSonic[4] = 35;
	sensorTest.ultraSonic[5] = 34;
	
	sensorTest.ultraSonicHeading[0] = 0;
	sensorTest.ultraSonicHeading[1] = 90;
	sensorTest.ultraSonicHeading[2] = 180;
	sensorTest.ultraSonicHeading[3] = 270;
	sensorTest.ultraSonicHeading[4] = 70;
	sensorTest.ultraSonicHeading[5] = 110;
    sensorTest.heading = 90;
	
	return sensorTest;
}
/*
2,2
0, 3
0, 3 
0, 3 = 2,11

, -13
*/
