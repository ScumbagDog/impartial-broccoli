#ifndef ULTRASONICSENSOR_IS_COMPILED
#define ULTRASONICSENSOR_IS_COMPILED 1
#include "MonteCarlo.nxc"
#define SENSOR_US_SPEED 15
#define ULTRASONIC_PORT IN_4



byte results = 0;
int sensorHeading = 90;

sensorReading makeSensorReadings();
void activateUSSensor();
void rotateUS(int rotation);
sensorReading initiateReading();

sensorReading makeSensorReadings() {
    sensorReading reading = initiateReading();
   int i, j, k;
   for(i = 1; i <=READINGS_AMOUNT/4 ; i++) {
      rotateUS(ROTATION_AMOUNT_DEGREE);
      activateUSSensor();
      reading.ultraSonic[i] = results;
      reading.ultraSonicHeading[i] = sensorHeading;
   }
   for(j = 1; j <=READINGS_AMOUNT/2 ; j++) {
      rotateUS(-ROTATION_AMOUNT_DEGREE);
      activateUSSensor();
      reading.ultraSonic[j+i] = results;
      reading.ultraSonicHeading[j+i] = sensorHeading;
   }
   for(k = 1; k <=READINGS_AMOUNT/4 ; k++) {
      rotateUS(ROTATION_AMOUNT_DEGREE);
      activateUSSensor();
      reading.ultraSonic[k+j+i] = results;
      reading.ultraSonicHeading[k+j+i] = sensorHeading;
   }
   return reading;

}

sensorReading initiateReading(){
  sensorReading reading;
  ArrayInit(reading.ultraSonic, 0,READINGS_AMOUNT );
  ArrayInit(reading.ultraSonicHeading, 0,READINGS_AMOUNT );
  return reading;
}

void activateUSSensor() {
   SetSensorUltrasonic(ULTRASONIC_PORT);
   results = SensorUS(ULTRASONIC_PORT);

}
// 90 grader
void rotateUS(int rotation){
   RotateMotor(OUT_C, SENSOR_US_SPEED, rotation);
   sensorHeading = sensorHeading - rotation;
}
#endif
